Ideas for the project itself
============================

- forking of turing machine? - COW tape (only cell copy)
- better distinction between data and state of tm
- tm_states *states; instead of state_list *states
  IMPORTANT: new data structures - maybe dynamic array because we do not
  have any deletions!
  states are only added so....how about 
- tape_new_empty() should be possible
- usr pointer in some structs
- void tm_compute_step_reverse(tm *this) - "undo" the last transition
- subroutines - own subroutines like convert_number_new_base()
  or other useful subroutines.
- normal print is export to dot? great...
- turing machines as an transition from one state to another
  edge::target points to start state of
- maybe distinguish between structname_free() and structname_free_refs()
  this would be useful to know if the struct pointer itself is freed or just
  the references which it owns

Ideas which are only linked to this project:
============================================
 -grammar interpreter/parser on the base of this tm-project
  manowar lyrics generator on the base of this tm-project
  general parser for cool stuff like own xml

/**
 *	1) All macros,constants and enums in caps except for function-like macros
 *	2) Struct names and typedef's in snake_case
 *	3) Functions that operate on structs: structname_method(structname *this, ...)
 *	   static functions that operate on structs: __structname_method(structname *this, ...)
 *	7) List-structs: List-struct of struct example is: struct example_list
 *	7.1) element name is always "node":
 *		example_list_add_node(example_list *this, ...)
 *		exampel_list_del_node(example_list *this, ...)
 *	8) Array-structs: Array-struct of example is: examples with members "data" and "length"
 *	9) For every struct we have the functions:
 *		structname_free()
 *		structname_copy()
 *		structname_print()
 *		structname_init()
 *		structname_new()
 */

struct grammar {
	struct rules *left_side;
	struct rules *right_side;
};

struct rules {
	struct __rules *data;
	unsigned int length; 
};

struct __rules {
	struct __rule *rules;
	unsigned int num;
};

struct __rule {
	enum TYPE type;
	union {
		char terminal;
		char non_terminal;
	};
};

	S -> (S * S) | S + S | (S) | N
	N -> 0 | K
	K -> 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | KK | K0

	struct grammar *math_term;

	math_term->left_side->length = 3;
	math_term->left_size->data[0] = 



